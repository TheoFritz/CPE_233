; ----------------------------------------------------
;
; SIMON SAYS ASSEMBLY CODE
; DOMINIC GAIERO AND ELIZABETH DAVIS
;
; DESCRIPTION:
; 
; ----------------------------------------------------

.EQU SWITCHES = 0x20
.EQU RAND = 0x22
.EQU BTN_STATUS = 0x35
.EQU INT_BTN_PRESS = 0x39
.EQU LEDS = 0x40
.EQU LED_STATUS = 0x41
.EQU INT_LED_SET = 0x37
.EQU INT_LED_CLR = 0x38
.EQU SEVEN_SEG = 0x81

;--------------------------------------------------------------------------
;-- .ORG used in code segment
;--------------------------------------------------------------------------
.CSEG
.ORG 0x01                ; SET THE DATA SEGMENT COUNTER TO 0x01

MOV R1, 0x00 ; MOVES 0x00 INTO R1 (R1 HOLDS THE LOCATION OF THE VALUES IN THE SCRATCH RAM

MAIN: IN R0, RAND ; TAKES IN A VALUE FROM THE RANDOM NUMBER GENERATOR
AND R0, 0x0F ; MASKS THE UPPER FOUR BITS OF THE VALUE FROM THE RANDOM NUMBER GENERATOR 

ST R0,(R1) ; STORES THE VALUE FROM THE RANDOM NUMBER GENERATOR AT LOCATION 0 IN THE SCRATCH RAM
CALL SHOW_LED ; CALLS THE SHOW LED SUBROUTINE
CALL READ_VALUES ; CALLS THE READ_VALUES SUBROUTINE
ADD R1, 0x01 ; ADDS ONE TO R1 TO STEP THROUGH THE SCRATCH RAM
CMP R1, 0xC8 ; COMPARES R1 WITH DECIMAL 200
BREQ PROGRAM_END ; IF R1 IS 200 THE PROGRAM WILL END
BRN MAIN ; ELSE IT WILL CONTINUE TO LOOP


SHOW_LED:
MOV R2,0x00
MOV R6, 0x01

SHOW_LED_MAIN_LOOP:
LD R3,(R2)
OUT R3, LED_STATUS; OUTPUT THE VALUE IN R3 TO THE SIMON SAYS LEDS
OUT R6, INT_LED_SET
CALL QRT_SEC_DEL
OUT R6, INT_LED_CLR
EXOR R6, 0x01
OUT R6, INT_LED_SET
OUT R6, INT_LED_CLR
EXOR R6, 0x01
CMP R1,R2
BRNE ADD_ONE_SHOW_LED
RET

ADD_ONE_SHOW_LED:
ADD R2,0x01
BRN SHOW_LED_MAIN_LOOP

READ_VALUES:
MOV R2,0x00

READ_VALUES_MAIN_LOOP:
IN R5, INT_BTN_PRESS
OUT R5, LEDS
CMP R5, 0x01
BRNE READ_VALUES_MAIN_LOOP
IN R4, BTN_STATUS
AND R4, 0x0F
LD R3, (R2)
OUT R0, SEVEN_SEG
CMP R3, R4
BRNE PROGRAM_END
CMP R2,R1
BRNE ADD_ONE_READ_VALUES
RET

ADD_ONE_READ_VALUES:
ADD R2, 0x01
LD R3, (R2)
BRN READ_VALUES_MAIN_LOOP

PROGRAM_END: MOV R7, 0x0F
MOV R6, 0x01
OUT R6, INT_LED_SET
OUT R7, LED_STATUS
CALL QRT_SEC_DEL
OUT R6, INT_LED_CLR
MOV R6, 0x00
OUT R6, INT_LED_SET
OUT R6, INT_LED_CLR
MOV R8, 0x00
OUT R8, LED_STATUS
CALL QRT_SEC_DEL
OUT R7, LED_STATUS
BRN MAIN


 QRT_SEC_DEL :	;- initialize to 0
				MOV R12,0x00
				MOV R13,0x00
				MOV R14,0x00

clock_delay1 :	ADD R12,0x01 ;- add 1 (1 clock cycle)
				CMP R12,0xFF
				;- if R12 = 190, zero flag is set, branch to clock_delay2
				BREQ clock_delay2
				;- otherwise, run this loop again
				BRN clock_delay1

clock_delay2 :	ADD R13,0x01 ;- add 1 (1 clock cycle)
				CMP R13,0xFF
				; if R13 = 190, zero flag is set, return to main
				BREQ clock_delay3
				;- otherwise, run clock_delay1
				BRN clock_delay1

clock_delay3 :	ADD R14,0x01 ;- add 1 (1 clock cycle)
				CMP R14,0x18
				;- if R14 = value that works, zero flag is set, return to main
				BREQ return
				;- otherwise, run clock_delay1
				BRN clock_delay1

return :		RET
